Testing OK clause Ensure(x).contains(0)
Testing OK clause Check(x).contains(0).otherwise(Exception)
Testing OK clause Check(x).contains(0).or_raise(Exception)
Testing OK clause Check(x).contains(0).or_call(self.assertTrue, False)
Testing OK clause bool(Check(x).contains(0))
Testing OK clause Ensure(x).contains_all_of(range(10))
Testing OK clause Check(x).contains_all_of(range(10)).otherwise(Exception)
Testing OK clause Check(x).contains_all_of(range(10)).or_raise(Exception)
Testing OK clause Check(x).contains_all_of(range(10)).or_call(self.assertTrue, False)
Testing OK clause bool(Check(x).contains_all_of(range(10)))
Testing OK clause Ensure(x).contains_no(str)
Testing OK clause Check(x).contains_no(str).otherwise(Exception)
Testing OK clause Check(x).contains_no(str).or_raise(Exception)
Testing OK clause Check(x).contains_no(str).or_call(self.assertTrue, False)
Testing OK clause bool(Check(x).contains_no(str))
Testing OK clause Ensure(x).contains_none_of(range(20, 30))
Testing OK clause Check(x).contains_none_of(range(20, 30)).otherwise(Exception)
Testing OK clause Check(x).contains_none_of(range(20, 30)).or_raise(Exception)
Testing OK clause Check(x).contains_none_of(range(20, 30)).or_call(self.assertTrue, False)
Testing OK clause bool(Check(x).contains_none_of(range(20, 30)))
Testing OK clause Ensure(x).contains_one_of(range(1))
Testing OK clause Check(x).contains_one_of(range(1)).otherwise(Exception)
Testing OK clause Check(x).contains_one_of(range(1)).or_raise(Exception)
Testing OK clause Check(x).contains_one_of(range(1)).or_call(self.assertTrue, False)
Testing OK clause bool(Check(x).contains_one_of(range(1)))
Testing OK clause Ensure(x).contains_some_of(range(2))
Testing OK clause Check(x).contains_some_of(range(2)).otherwise(Exception)
Testing OK clause Check(x).contains_some_of(range(2)).or_raise(Exception)
Testing OK clause Check(x).contains_some_of(range(2)).or_call(self.assertTrue, False)
Testing OK clause bool(Check(x).contains_some_of(range(2)))
Testing OK clause Ensure(x).contains_only(range(10))
Testing OK clause Check(x).contains_only(range(10)).otherwise(Exception)
Testing OK clause Check(x).contains_only(range(10)).or_raise(Exception)
Testing OK clause Check(x).contains_only(range(10)).or_call(self.assertTrue, False)
Testing OK clause bool(Check(x).contains_only(range(10)))
Testing OK clause Ensure(x).does_not_contain(-1)
Testing OK clause Check(x).does_not_contain(-1).otherwise(Exception)
Testing OK clause Check(x).does_not_contain(-1).or_raise(Exception)
Testing OK clause Check(x).does_not_contain(-1).or_call(self.assertTrue, False)
Testing OK clause bool(Check(x).does_not_contain(-1))
Testing OK clause Ensure(x).does_not_equal(range(10))
Testing OK clause Check(x).does_not_equal(range(10)).otherwise(Exception)
Testing OK clause Check(x).does_not_equal(range(10)).or_raise(Exception)
Testing OK clause Check(x).does_not_equal(range(10)).or_call(self.assertTrue, False)
Testing OK clause bool(Check(x).does_not_equal(range(10)))
Testing OK clause Ensure(x).has_attribute("__iter__")
Testing OK clause Check(x).has_attribute("__iter__").otherwise(Exception)
Testing OK clause Check(x).has_attribute("__iter__").or_raise(Exception)
Testing OK clause Check(x).has_attribute("__iter__").or_call(self.assertTrue, False)
Testing OK clause bool(Check(x).has_attribute("__iter__"))
Testing OK clause Ensure(x).has_length(10).also.is_nonempty()
Testing OK clause Check(x).has_length(10).also.is_nonempty().otherwise(Exception)
Testing OK clause Check(x).has_length(10).also.is_nonempty().or_raise(Exception)
Testing OK clause Check(x).has_length(10).also.is_nonempty().or_call(self.assertTrue, False)
Testing OK clause bool(Check(x).has_length(10).also.is_nonempty())
Testing OK clause Ensure(x).has_length(length=10, min=9, max=10)
Testing OK clause Check(x).has_length(length=10, min=9, max=10).otherwise(Exception)
Testing OK clause Check(x).has_length(length=10, min=9, max=10).or_raise(Exception)
Testing OK clause Check(x).has_length(length=10, min=9, max=10).or_call(self.assertTrue, False)
Testing OK clause bool(Check(x).has_length(length=10, min=9, max=10))
Testing OK clause Ensure(x).has_length(max=99.9)
Testing OK clause Check(x).has_length(max=99.9).otherwise(Exception)
Testing OK clause Check(x).has_length(max=99.9).or_raise(Exception)
Testing OK clause Check(x).has_length(max=99.9).or_call(self.assertTrue, False)
Testing OK clause bool(Check(x).has_length(max=99.9))
Testing OK clause Ensure(x).is_nonempty().also.has_length(10)
Testing OK clause Check(x).is_nonempty().also.has_length(10).otherwise(Exception)
Testing OK clause Check(x).is_nonempty().also.has_length(10).or_raise(Exception)
Testing OK clause Check(x).is_nonempty().also.has_length(10).or_call(self.assertTrue, False)
Testing OK clause bool(Check(x).is_nonempty().also.has_length(10))
Testing OK clause Ensure(x).is_a(collections.abc.Mapping)
Testing OK clause Check(x).is_a(collections.abc.Mapping).otherwise(Exception)
Testing OK clause Check(x).is_a(collections.abc.Mapping).or_raise(Exception)
Testing OK clause Check(x).is_a(collections.abc.Mapping).or_call(self.assertTrue, False)
Testing OK clause bool(Check(x).is_a(collections.abc.Mapping))
Testing OK clause Ensure(x).is_a_dict_of(int).to(int)
Testing OK clause Check(x).is_a_dict_of(int).to(int).otherwise(Exception)
Testing OK clause Check(x).is_a_dict_of(int).to(int).or_raise(Exception)
Testing OK clause Check(x).is_a_dict_of(int).to(int).or_call(self.assertTrue, False)
Testing OK clause bool(Check(x).is_a_dict_of(int).to(int))
Testing OK clause Ensure(x).is_a(collections.abc.Mapping).of(int).to(int)
Testing OK clause Check(x).is_a(collections.abc.Mapping).of(int).to(int).otherwise(Exception)
Testing OK clause Check(x).is_a(collections.abc.Mapping).of(int).to(int).or_raise(Exception)
Testing OK clause Check(x).is_a(collections.abc.Mapping).of(int).to(int).or_call(self.assertTrue, False)
Testing OK clause bool(Check(x).is_a(collections.abc.Mapping).of(int).to(int))
Testing OK clause Ensure(6).is_greater_than(5)
Testing OK clause Check(6).is_greater_than(5).otherwise(Exception)
Testing OK clause Check(6).is_greater_than(5).or_raise(Exception)
Testing OK clause Check(6).is_greater_than(5).or_call(self.assertTrue, False)
Testing OK clause bool(Check(6).is_greater_than(5))
Testing OK clause Ensure(6).exceeds(5)
Testing OK clause Check(6).exceeds(5).otherwise(Exception)
Testing OK clause Check(6).exceeds(5).or_raise(Exception)
Testing OK clause Check(6).exceeds(5).or_call(self.assertTrue, False)
Testing OK clause bool(Check(6).exceeds(5))
Testing OK clause Ensure(1.1).is_greater_than_or_equal_to(1.1)
Testing OK clause Check(1.1).is_greater_than_or_equal_to(1.1).otherwise(Exception)
Testing OK clause Check(1.1).is_greater_than_or_equal_to(1.1).or_raise(Exception)
Testing OK clause Check(1.1).is_greater_than_or_equal_to(1.1).or_call(self.assertTrue, False)
Testing OK clause bool(Check(1.1).is_greater_than_or_equal_to(1.1))
Testing OK clause Ensure(1.1).is_less_than_or_equal_to(1.1)
Testing OK clause Check(1.1).is_less_than_or_equal_to(1.1).otherwise(Exception)
Testing OK clause Check(1.1).is_less_than_or_equal_to(1.1).or_raise(Exception)
Testing OK clause Check(1.1).is_less_than_or_equal_to(1.1).or_call(self.assertTrue, False)
Testing OK clause bool(Check(1.1).is_less_than_or_equal_to(1.1))
Testing OK clause Ensure(1).is_less_than(1.1)
Testing OK clause Check(1).is_less_than(1.1).otherwise(Exception)
Testing OK clause Check(1).is_less_than(1.1).or_raise(Exception)
Testing OK clause Check(1).is_less_than(1.1).or_call(self.assertTrue, False)
Testing OK clause bool(Check(1).is_less_than(1.1))
Testing OK clause Ensure(1).is_positive()
Testing OK clause Check(1).is_positive().otherwise(Exception)
Testing OK clause Check(1).is_positive().or_raise(Exception)
Testing OK clause Check(1).is_positive().or_call(self.assertTrue, False)
Testing OK clause bool(Check(1).is_positive())
Testing OK clause Ensure(1.1).is_a_positive(float)
Testing OK clause Check(1.1).is_a_positive(float).otherwise(Exception)
Testing OK clause Check(1.1).is_a_positive(float).or_raise(Exception)
Testing OK clause Check(1.1).is_a_positive(float).or_call(self.assertTrue, False)
Testing OK clause bool(Check(1.1).is_a_positive(float))
Testing OK clause Ensure(-1).is_negative()
Testing OK clause Check(-1).is_negative().otherwise(Exception)
Testing OK clause Check(-1).is_negative().or_raise(Exception)
Testing OK clause Check(-1).is_negative().or_call(self.assertTrue, False)
Testing OK clause bool(Check(-1).is_negative())
Testing OK clause Ensure(-1).is_a_negative(int)
Testing OK clause Check(-1).is_a_negative(int).otherwise(Exception)
Testing OK clause Check(-1).is_a_negative(int).or_raise(Exception)
Testing OK clause Check(-1).is_a_negative(int).or_call(self.assertTrue, False)
Testing OK clause bool(Check(-1).is_a_negative(int))
Testing OK clause Ensure(0).is_nonnegative()
Testing OK clause Check(0).is_nonnegative().otherwise(Exception)
Testing OK clause Check(0).is_nonnegative().or_raise(Exception)
Testing OK clause Check(0).is_nonnegative().or_call(self.assertTrue, False)
Testing OK clause bool(Check(0).is_nonnegative())
Testing OK clause Ensure(0).is_a_nonnegative(int)
Testing OK clause Check(0).is_a_nonnegative(int).otherwise(Exception)
Testing OK clause Check(0).is_a_nonnegative(int).or_raise(Exception)
Testing OK clause Check(0).is_a_nonnegative(int).or_call(self.assertTrue, False)
Testing OK clause bool(Check(0).is_a_nonnegative(int))
Testing OK clause Ensure(1).is_a_positive(int).which.equals(1.0)
Testing OK clause Check(1).is_a_positive(int).which.equals(1.0).otherwise(Exception)
Testing OK clause Check(1).is_a_positive(int).which.equals(1.0).or_raise(Exception)
Testing OK clause Check(1).is_a_positive(int).which.equals(1.0).or_call(self.assertTrue, False)
Testing OK clause bool(Check(1).is_a_positive(int).which.equals(1.0))
Testing OK clause Ensure((collections.namedtuple("Thing", ["x"]))(x={})).has_attribute("x").which.is_a(dict)
Testing OK clause Check((collections.namedtuple("Thing", ["x"]))(x={})).has_attribute("x").which.is_a(dict).otherwise(Exception)
Testing OK clause Check((collections.namedtuple("Thing", ["x"]))(x={})).has_attribute("x").which.is_a(dict).or_raise(Exception)
Testing OK clause Check((collections.namedtuple("Thing", ["x"]))(x={})).has_attribute("x").which.is_a(dict).or_call(self.assertTrue, False)
Testing OK clause bool(Check((collections.namedtuple("Thing", ["x"]))(x={})).has_attribute("x").which.is_a(dict))
Testing OK clause Ensure({1:"a"}).has_key(1).whose_value.has_length(1)
Testing OK clause Check({1:"a"}).has_key(1).whose_value.has_length(1).otherwise(Exception)
Testing OK clause Check({1:"a"}).has_key(1).whose_value.has_length(1).or_raise(Exception)
Testing OK clause Check({1:"a"}).has_key(1).whose_value.has_length(1).or_call(self.assertTrue, False)
Testing OK clause bool(Check({1:"a"}).has_key(1).whose_value.has_length(1))
Testing OK clause Ensure({1: "a", 2: "b", 3: "c"}).has_keys((1, 2))
Testing OK clause Check({1: "a", 2: "b", 3: "c"}).has_keys((1, 2)).otherwise(Exception)
Testing OK clause Check({1: "a", 2: "b", 3: "c"}).has_keys((1, 2)).or_raise(Exception)
Testing OK clause Check({1: "a", 2: "b", 3: "c"}).has_keys((1, 2)).or_call(self.assertTrue, False)
Testing OK clause bool(Check({1: "a", 2: "b", 3: "c"}).has_keys((1, 2)))
Testing OK clause Ensure({1: "a", 2: "b", 3: "c"}).has_only_keys((1, 2, 3))
Testing OK clause Check({1: "a", 2: "b", 3: "c"}).has_only_keys((1, 2, 3)).otherwise(Exception)
Testing OK clause Check({1: "a", 2: "b", 3: "c"}).has_only_keys((1, 2, 3)).or_raise(Exception)
Testing OK clause Check({1: "a", 2: "b", 3: "c"}).has_only_keys((1, 2, 3)).or_call(self.assertTrue, False)
Testing OK clause bool(Check({1: "a", 2: "b", 3: "c"}).has_only_keys((1, 2, 3)))
Testing OK clause Ensure({}).is_empty()
Testing OK clause Check({}).is_empty().otherwise(Exception)
Testing OK clause Check({}).is_empty().or_raise(Exception)
Testing OK clause Check({}).is_empty().or_call(self.assertTrue, False)
Testing OK clause bool(Check({}).is_empty())
Testing OK clause Ensure(os.path.join).called_with("a", "b").returns(os.path.join("a", "b"))
Testing OK clause Check(os.path.join).called_with("a", "b").returns(os.path.join("a", "b")).otherwise(Exception)
Testing OK clause Check(os.path.join).called_with("a", "b").returns(os.path.join("a", "b")).or_raise(Exception)
Testing OK clause Check(os.path.join).called_with("a", "b").returns(os.path.join("a", "b")).or_call(self.assertTrue, False)
Testing OK clause bool(Check(os.path.join).called_with("a", "b").returns(os.path.join("a", "b")))
Testing OK clause Ensure(int).called_with("1100101", base=2).returns(101)
Testing OK clause Check(int).called_with("1100101", base=2).returns(101).otherwise(Exception)
Testing OK clause Check(int).called_with("1100101", base=2).returns(101).or_raise(Exception)
Testing OK clause Check(int).called_with("1100101", base=2).returns(101).or_call(self.assertTrue, False)
Testing OK clause bool(Check(int).called_with("1100101", base=2).returns(101))
Testing OK clause Ensure.each_of([1,2,3]).is_an(int)
Testing OK clause Ensure.each_of([lambda x: x, lambda y: y]).called_with(1).returns(1)
Testing OK clause Ensure(True).is_none_or.is_an(int)
Testing OK clause Check(True).is_none_or.is_an(int).otherwise(Exception)
Testing OK clause Check(True).is_none_or.is_an(int).or_raise(Exception)
Testing OK clause Check(True).is_none_or.is_an(int).or_call(self.assertTrue, False)
Testing OK clause bool(Check(True).is_none_or.is_an(int))
Testing OK clause Ensure(None).is_none_or.is_a_negative(int)
Testing OK clause Check(None).is_none_or.is_a_negative(int).otherwise(Exception)
Testing OK clause Check(None).is_none_or.is_a_negative(int).or_raise(Exception)
Testing OK clause Check(None).is_none_or.is_a_negative(int).or_call(self.assertTrue, False)
Testing OK clause bool(Check(None).is_none_or.is_a_negative(int))
Testing OK clause Ensure(-5).is_none_or.is_a_negative(int)
Testing OK clause Check(-5).is_none_or.is_a_negative(int).otherwise(Exception)
Testing OK clause Check(-5).is_none_or.is_a_negative(int).or_raise(Exception)
Testing OK clause Check(-5).is_none_or.is_a_negative(int).or_call(self.assertTrue, False)
Testing OK clause bool(Check(-5).is_none_or.is_a_negative(int))
Testing OK clause Ensure({"a": "b"}).is_none_or.has_key("a")
Testing OK clause Check({"a": "b"}).is_none_or.has_key("a").otherwise(Exception)
Testing OK clause Check({"a": "b"}).is_none_or.has_key("a").or_raise(Exception)
Testing OK clause Check({"a": "b"}).is_none_or.has_key("a").or_call(self.assertTrue, False)
Testing OK clause bool(Check({"a": "b"}).is_none_or.has_key("a"))
Testing OK clause Ensure([1,2,3]).is_sorted()
Testing OK clause Check([1,2,3]).is_sorted().otherwise(Exception)
Testing OK clause Check([1,2,3]).is_sorted().or_raise(Exception)
Testing OK clause Check([1,2,3]).is_sorted().or_call(self.assertTrue, False)
Testing OK clause bool(Check([1,2,3]).is_sorted())
Testing OK clause Ensure([3,2,1]).is_sorted(key=lambda x: -x)
Testing OK clause Check([3,2,1]).is_sorted(key=lambda x: -x).otherwise(Exception)
Testing OK clause Check([3,2,1]).is_sorted(key=lambda x: -x).or_raise(Exception)
Testing OK clause Check([3,2,1]).is_sorted(key=lambda x: -x).or_call(self.assertTrue, False)
Testing OK clause bool(Check([3,2,1]).is_sorted(key=lambda x: -x))
Testing OK clause Ensure("A").satisfies(str.isupper)
Testing OK clause Check("A").satisfies(str.isupper).otherwise(Exception)
Testing OK clause Check("A").satisfies(str.isupper).or_raise(Exception)
Testing OK clause Check("A").satisfies(str.isupper).or_call(self.assertTrue, False)
Testing OK clause bool(Check("A").satisfies(str.isupper))
Testing OK clause Ensure("A").satisfies(".isupper")
Testing OK clause Check("A").satisfies(".isupper").otherwise(Exception)
Testing OK clause Check("A").satisfies(".isupper").or_raise(Exception)
Testing OK clause Check("A").satisfies(".isupper").or_call(self.assertTrue, False)
Testing OK clause bool(Check("A").satisfies(".isupper"))
Testing OK clause Ensure("ABC").satisfies(str.startswith, "AB")
Testing OK clause Check("ABC").satisfies(str.startswith, "AB").otherwise(Exception)
Testing OK clause Check("ABC").satisfies(str.startswith, "AB").or_raise(Exception)
Testing OK clause Check("ABC").satisfies(str.startswith, "AB").or_call(self.assertTrue, False)
Testing OK clause bool(Check("ABC").satisfies(str.startswith, "AB"))
Testing OK clause Ensure("ABC").satisfies(".startswith", "AB")
Testing OK clause Check("ABC").satisfies(".startswith", "AB").otherwise(Exception)
Testing OK clause Check("ABC").satisfies(".startswith", "AB").or_raise(Exception)
Testing OK clause Check("ABC").satisfies(".startswith", "AB").or_call(self.assertTrue, False)
Testing OK clause bool(Check("ABC").satisfies(".startswith", "AB"))
Testing OK clause Ensure(3).satisfies(lambda x, y: x < y, y=4)
Testing OK clause Check(3).satisfies(lambda x, y: x < y, y=4).otherwise(Exception)
Testing OK clause Check(3).satisfies(lambda x, y: x < y, y=4).or_raise(Exception)
Testing OK clause Check(3).satisfies(lambda x, y: x < y, y=4).or_call(self.assertTrue, False)
Testing OK clause bool(Check(3).satisfies(lambda x, y: x < y, y=4))
Testing bad clause Ensure(x).contains(-1)
Testing bad clause Check(x).contains(-1).otherwise(Exception)
Testing bad clause Check(x).contains(-1).or_raise(Exception)
Testing bad clause Check(x).contains(-1).or_call(self.assertTrue, False)
Testing bad clause bool(Check(x).contains(-1))
Testing bad clause Ensure(x).has_length(10).also.is_empty()
Testing bad clause Check(x).has_length(10).also.is_empty().otherwise(Exception)
Testing bad clause Check(x).has_length(10).also.is_empty().or_raise(Exception)
Testing bad clause Check(x).has_length(10).also.is_empty().or_call(self.assertTrue, False)
Testing bad clause bool(Check(x).has_length(10).also.is_empty())
Testing bad clause Ensure(x).contains_all_of(range(20))
Testing bad clause Check(x).contains_all_of(range(20)).otherwise(Exception)
Testing bad clause Check(x).contains_all_of(range(20)).or_raise(Exception)
Testing bad clause Check(x).contains_all_of(range(20)).or_call(self.assertTrue, False)
Testing bad clause bool(Check(x).contains_all_of(range(20)))
Testing bad clause Ensure(x).contains_no(int)
Testing bad clause Check(x).contains_no(int).otherwise(Exception)
Testing bad clause Check(x).contains_no(int).or_raise(Exception)
Testing bad clause Check(x).contains_no(int).or_call(self.assertTrue, False)
Testing bad clause bool(Check(x).contains_no(int))
Testing bad clause Ensure(x).contains_none_of(range(0, 30))
Testing bad clause Check(x).contains_none_of(range(0, 30)).otherwise(Exception)
Testing bad clause Check(x).contains_none_of(range(0, 30)).or_raise(Exception)
Testing bad clause Check(x).contains_none_of(range(0, 30)).or_call(self.assertTrue, False)
Testing bad clause bool(Check(x).contains_none_of(range(0, 30)))
Testing bad clause Ensure(x).contains_one_of(range(2))
Testing bad clause Check(x).contains_one_of(range(2)).otherwise(Exception)
Testing bad clause Check(x).contains_one_of(range(2)).or_raise(Exception)
Testing bad clause Check(x).contains_one_of(range(2)).or_call(self.assertTrue, False)
Testing bad clause bool(Check(x).contains_one_of(range(2)))
Testing bad clause Ensure(x).contains_some_of(range(20, 30))
Testing bad clause Check(x).contains_some_of(range(20, 30)).otherwise(Exception)
Testing bad clause Check(x).contains_some_of(range(20, 30)).or_raise(Exception)
Testing bad clause Check(x).contains_some_of(range(20, 30)).or_call(self.assertTrue, False)
Testing bad clause bool(Check(x).contains_some_of(range(20, 30)))
Testing bad clause Ensure(x).contains_only(range(11))
Testing bad clause Check(x).contains_only(range(11)).otherwise(Exception)
Testing bad clause Check(x).contains_only(range(11)).or_raise(Exception)
Testing bad clause Check(x).contains_only(range(11)).or_call(self.assertTrue, False)
Testing bad clause bool(Check(x).contains_only(range(11)))
Testing bad clause Ensure(x).does_not_contain(1)
Testing bad clause Check(x).does_not_contain(1).otherwise(Exception)
Testing bad clause Check(x).does_not_contain(1).or_raise(Exception)
Testing bad clause Check(x).does_not_contain(1).or_call(self.assertTrue, False)
Testing bad clause bool(Check(x).does_not_contain(1))
Testing bad clause Ensure(x).does_not_equal(x)
Testing bad clause Check(x).does_not_equal(x).otherwise(Exception)
Testing bad clause Check(x).does_not_equal(x).or_raise(Exception)
Testing bad clause Check(x).does_not_equal(x).or_call(self.assertTrue, False)
Testing bad clause bool(Check(x).does_not_equal(x))
Testing bad clause Ensure(x).does_not_equal(copy.deepcopy(x))
Testing bad clause Check(x).does_not_equal(copy.deepcopy(x)).otherwise(Exception)
Testing bad clause Check(x).does_not_equal(copy.deepcopy(x)).or_raise(Exception)
Testing bad clause Check(x).does_not_equal(copy.deepcopy(x)).or_call(self.assertTrue, False)
Testing bad clause bool(Check(x).does_not_equal(copy.deepcopy(x)))
Testing bad clause Ensure(x).has_attribute("y")
Testing bad clause Check(x).has_attribute("y").otherwise(Exception)
Testing bad clause Check(x).has_attribute("y").or_raise(Exception)
Testing bad clause Check(x).has_attribute("y").or_call(self.assertTrue, False)
Testing bad clause bool(Check(x).has_attribute("y"))
Testing bad clause Ensure(x).has_length(1)
Testing bad clause Check(x).has_length(1).otherwise(Exception)
Testing bad clause Check(x).has_length(1).or_raise(Exception)
Testing bad clause Check(x).has_length(1).or_call(self.assertTrue, False)
Testing bad clause bool(Check(x).has_length(1))
Testing bad clause Ensure(x).has_length(length=1, min=9, max=10)
Testing bad clause Check(x).has_length(length=1, min=9, max=10).otherwise(Exception)
Testing bad clause Check(x).has_length(length=1, min=9, max=10).or_raise(Exception)
Testing bad clause Check(x).has_length(length=1, min=9, max=10).or_call(self.assertTrue, False)
Testing bad clause bool(Check(x).has_length(length=1, min=9, max=10))
Testing bad clause Ensure(x).has_length(min=11)
Testing bad clause Check(x).has_length(min=11).otherwise(Exception)
Testing bad clause Check(x).has_length(min=11).or_raise(Exception)
Testing bad clause Check(x).has_length(min=11).or_call(self.assertTrue, False)
Testing bad clause bool(Check(x).has_length(min=11))
Testing bad clause Ensure(x).has_length(max=1.1)
Testing bad clause Check(x).has_length(max=1.1).otherwise(Exception)
Testing bad clause Check(x).has_length(max=1.1).or_raise(Exception)
Testing bad clause Check(x).has_length(max=1.1).or_call(self.assertTrue, False)
Testing bad clause bool(Check(x).has_length(max=1.1))
Testing bad clause Ensure(x).is_a(str)
Testing bad clause Check(x).is_a(str).otherwise(Exception)
Testing bad clause Check(x).is_a(str).or_raise(Exception)
Testing bad clause Check(x).is_a(str).or_call(self.assertTrue, False)
Testing bad clause bool(Check(x).is_a(str))
Testing bad clause Ensure(x).is_empty()
Testing bad clause Check(x).is_empty().otherwise(Exception)
Testing bad clause Check(x).is_empty().or_raise(Exception)
Testing bad clause Check(x).is_empty().or_call(self.assertTrue, False)
Testing bad clause bool(Check(x).is_empty())
Testing bad clause Ensure(6).is_greater_than(7)
Testing bad clause Check(6).is_greater_than(7).otherwise(Exception)
Testing bad clause Check(6).is_greater_than(7).or_raise(Exception)
Testing bad clause Check(6).is_greater_than(7).or_call(self.assertTrue, False)
Testing bad clause bool(Check(6).is_greater_than(7))
Testing bad clause Ensure(6).exceeds(7)
Testing bad clause Check(6).exceeds(7).otherwise(Exception)
Testing bad clause Check(6).exceeds(7).or_raise(Exception)
Testing bad clause Check(6).exceeds(7).or_call(self.assertTrue, False)
Testing bad clause bool(Check(6).exceeds(7))
Testing bad clause Ensure(1).is_greater_than_or_equal_to(1.1)
Testing bad clause Check(1).is_greater_than_or_equal_to(1.1).otherwise(Exception)
Testing bad clause Check(1).is_greater_than_or_equal_to(1.1).or_raise(Exception)
Testing bad clause Check(1).is_greater_than_or_equal_to(1.1).or_call(self.assertTrue, False)
Testing bad clause bool(Check(1).is_greater_than_or_equal_to(1.1))
Testing bad clause Ensure(None).is_greater_than_or_equal_to(1.1)
Testing bad clause Check(None).is_greater_than_or_equal_to(1.1).otherwise(Exception)
Testing bad clause Check(None).is_greater_than_or_equal_to(1.1).or_raise(Exception)
Testing bad clause Check(None).is_greater_than_or_equal_to(1.1).or_call(self.assertTrue, False)
Testing bad clause bool(Check(None).is_greater_than_or_equal_to(1.1))
Testing bad clause Ensure(5).is_less_than_or_equal_to(1)
Testing bad clause Check(5).is_less_than_or_equal_to(1).otherwise(Exception)
Testing bad clause Check(5).is_less_than_or_equal_to(1).or_raise(Exception)
Testing bad clause Check(5).is_less_than_or_equal_to(1).or_call(self.assertTrue, False)
Testing bad clause bool(Check(5).is_less_than_or_equal_to(1))
Testing bad clause Ensure(1).is_less_than(None)
Testing bad clause Check(1).is_less_than(None).otherwise(Exception)
Testing bad clause Check(1).is_less_than(None).or_raise(Exception)
Testing bad clause Check(1).is_less_than(None).or_call(self.assertTrue, False)
Testing bad clause bool(Check(1).is_less_than(None))
Testing bad clause Ensure(0).is_positive()
Testing bad clause Check(0).is_positive().otherwise(Exception)
Testing bad clause Check(0).is_positive().or_raise(Exception)
Testing bad clause Check(0).is_positive().or_call(self.assertTrue, False)
Testing bad clause bool(Check(0).is_positive())
Testing bad clause Ensure(1).is_a_positive(float)
Testing bad clause Check(1).is_a_positive(float).otherwise(Exception)
Testing bad clause Check(1).is_a_positive(float).or_raise(Exception)
Testing bad clause Check(1).is_a_positive(float).or_call(self.assertTrue, False)
Testing bad clause bool(Check(1).is_a_positive(float))
Testing bad clause Ensure(1).is_negative()
Testing bad clause Check(1).is_negative().otherwise(Exception)
Testing bad clause Check(1).is_negative().or_raise(Exception)
Testing bad clause Check(1).is_negative().or_call(self.assertTrue, False)
Testing bad clause bool(Check(1).is_negative())
Testing bad clause Ensure(-0).is_a_negative(int)
Testing bad clause Check(-0).is_a_negative(int).otherwise(Exception)
Testing bad clause Check(-0).is_a_negative(int).or_raise(Exception)
Testing bad clause Check(-0).is_a_negative(int).or_call(self.assertTrue, False)
Testing bad clause bool(Check(-0).is_a_negative(int))
Testing bad clause Ensure(-0.1).is_nonnegative()
Testing bad clause Check(-0.1).is_nonnegative().otherwise(Exception)
Testing bad clause Check(-0.1).is_nonnegative().or_raise(Exception)
Testing bad clause Check(-0.1).is_nonnegative().or_call(self.assertTrue, False)
Testing bad clause bool(Check(-0.1).is_nonnegative())
Testing bad clause Ensure(None).is_a_nonnegative(int)
Testing bad clause Check(None).is_a_nonnegative(int).otherwise(Exception)
Testing bad clause Check(None).is_a_nonnegative(int).or_raise(Exception)
Testing bad clause Check(None).is_a_nonnegative(int).or_call(self.assertTrue, False)
Testing bad clause bool(Check(None).is_a_nonnegative(int))
Testing bad clause Ensure({1: "a"}).has_key(1).whose_value.has_length(2)
Testing bad clause Check({1: "a"}).has_key(1).whose_value.has_length(2).otherwise(Exception)
Testing bad clause Check({1: "a"}).has_key(1).whose_value.has_length(2).or_raise(Exception)
Testing bad clause Check({1: "a"}).has_key(1).whose_value.has_length(2).or_call(self.assertTrue, False)
Testing bad clause bool(Check({1: "a"}).has_key(1).whose_value.has_length(2))
Testing bad clause Ensure({1: "a"}).has_keys((1, 2))
Testing bad clause Check({1: "a"}).has_keys((1, 2)).otherwise(Exception)
Testing bad clause Check({1: "a"}).has_keys((1, 2)).or_raise(Exception)
Testing bad clause Check({1: "a"}).has_keys((1, 2)).or_call(self.assertTrue, False)
Testing bad clause bool(Check({1: "a"}).has_keys((1, 2)))
Testing bad clause Ensure({1: "a", 2: "b"}).has_only_keys([1])
Testing bad clause Check({1: "a", 2: "b"}).has_only_keys([1]).otherwise(Exception)
Testing bad clause Check({1: "a", 2: "b"}).has_only_keys([1]).or_raise(Exception)
Testing bad clause Check({1: "a", 2: "b"}).has_only_keys([1]).or_call(self.assertTrue, False)
Testing bad clause bool(Check({1: "a", 2: "b"}).has_only_keys([1]))
Testing bad clause Ensure({1: "a", 2: "b"}).has_only_keys([1, 2, 3])
Testing bad clause Check({1: "a", 2: "b"}).has_only_keys([1, 2, 3]).otherwise(Exception)
Testing bad clause Check({1: "a", 2: "b"}).has_only_keys([1, 2, 3]).or_raise(Exception)
Testing bad clause Check({1: "a", 2: "b"}).has_only_keys([1, 2, 3]).or_call(self.assertTrue, False)
Testing bad clause bool(Check({1: "a", 2: "b"}).has_only_keys([1, 2, 3]))
Testing bad clause Ensure([1, 2, 3]).has_only_keys([1, 2, 3])
Testing bad clause Check([1, 2, 3]).has_only_keys([1, 2, 3]).otherwise(Exception)
Testing bad clause Check([1, 2, 3]).has_only_keys([1, 2, 3]).or_raise(Exception)
Testing bad clause Check([1, 2, 3]).has_only_keys([1, 2, 3]).or_call(self.assertTrue, False)
Testing bad clause bool(Check([1, 2, 3]).has_only_keys([1, 2, 3]))
Testing bad clause Ensure(os.path.join).called_with("a", "b").returns(None)
Testing bad clause Check(os.path.join).called_with("a", "b").returns(None).otherwise(Exception)
Testing bad clause Check(os.path.join).called_with("a", "b").returns(None).or_raise(Exception)
Testing bad clause Check(os.path.join).called_with("a", "b").returns(None).or_call(self.assertTrue, False)
Testing bad clause bool(Check(os.path.join).called_with("a", "b").returns(None))
Testing bad clause Ensure(1).is_a_positive(int).which.equals(1.2)
Testing bad clause Check(1).is_a_positive(int).which.equals(1.2).otherwise(Exception)
Testing bad clause Check(1).is_a_positive(int).which.equals(1.2).or_raise(Exception)
Testing bad clause Check(1).is_a_positive(int).which.equals(1.2).or_call(self.assertTrue, False)
Testing bad clause bool(Check(1).is_a_positive(int).which.equals(1.2))
Testing bad clause Ensure.each_of([lambda x: x, lambda y: y]).called_with(2).returns(1)
Testing bad clause Ensure(5).is_none_or.is_a_negative(int)
Testing bad clause Check(5).is_none_or.is_a_negative(int).otherwise(Exception)
Testing bad clause Check(5).is_none_or.is_a_negative(int).or_raise(Exception)
Testing bad clause Check(5).is_none_or.is_a_negative(int).or_call(self.assertTrue, False)
Testing bad clause bool(Check(5).is_none_or.is_a_negative(int))
Testing bad clause Ensure(None).is_a_negative(int)
Testing bad clause Check(None).is_a_negative(int).otherwise(Exception)
Testing bad clause Check(None).is_a_negative(int).or_raise(Exception)
Testing bad clause Check(None).is_a_negative(int).or_call(self.assertTrue, False)
Testing bad clause bool(Check(None).is_a_negative(int))
Testing bad clause Ensure([1,2,1]).is_sorted()
Testing bad clause Check([1,2,1]).is_sorted().otherwise(Exception)
Testing bad clause Check([1,2,1]).is_sorted().or_raise(Exception)
Testing bad clause Check([1,2,1]).is_sorted().or_call(self.assertTrue, False)
Testing bad clause bool(Check([1,2,1]).is_sorted())
Testing bad clause Ensure([1,2,1]).is_sorted(key=lambda x: -x)
Testing bad clause Check([1,2,1]).is_sorted(key=lambda x: -x).otherwise(Exception)
Testing bad clause Check([1,2,1]).is_sorted(key=lambda x: -x).or_raise(Exception)
Testing bad clause Check([1,2,1]).is_sorted(key=lambda x: -x).or_call(self.assertTrue, False)
Testing bad clause bool(Check([1,2,1]).is_sorted(key=lambda x: -x))
Testing bad clause Ensure(None).is_sorted()
Testing bad clause Check(None).is_sorted().otherwise(Exception)
Testing bad clause Check(None).is_sorted().or_raise(Exception)
Testing bad clause Check(None).is_sorted().or_call(self.assertTrue, False)
Testing bad clause bool(Check(None).is_sorted())
Testing bad clause Ensure("a").satisfies(str.isupper)
Testing bad clause Check("a").satisfies(str.isupper).otherwise(Exception)
Testing bad clause Check("a").satisfies(str.isupper).or_raise(Exception)
Testing bad clause Check("a").satisfies(str.isupper).or_call(self.assertTrue, False)
Testing bad clause bool(Check("a").satisfies(str.isupper))
Testing bad clause Ensure("a").satisfies(".isupper")
Testing bad clause Check("a").satisfies(".isupper").otherwise(Exception)
Testing bad clause Check("a").satisfies(".isupper").or_raise(Exception)
Testing bad clause Check("a").satisfies(".isupper").or_call(self.assertTrue, False)
Testing bad clause bool(Check("a").satisfies(".isupper"))
Testing bad clause Ensure("ABC").satisfies(str.startswith, "Z")
Testing bad clause Check("ABC").satisfies(str.startswith, "Z").otherwise(Exception)
Testing bad clause Check("ABC").satisfies(str.startswith, "Z").or_raise(Exception)
Testing bad clause Check("ABC").satisfies(str.startswith, "Z").or_call(self.assertTrue, False)
Testing bad clause bool(Check("ABC").satisfies(str.startswith, "Z"))
Testing bad clause Ensure("ABC").satisfies(".startswith", "Z")
Testing bad clause Check("ABC").satisfies(".startswith", "Z").otherwise(Exception)
Testing bad clause Check("ABC").satisfies(".startswith", "Z").or_raise(Exception)
Testing bad clause Check("ABC").satisfies(".startswith", "Z").or_call(self.assertTrue, False)
Testing bad clause bool(Check("ABC").satisfies(".startswith", "Z"))
Testing bad clause Ensure(5).satisfies(str.isupper)
Testing bad clause Check(5).satisfies(str.isupper).otherwise(Exception)
Testing bad clause Check(5).satisfies(str.isupper).or_raise(Exception)
Testing bad clause Check(5).satisfies(str.isupper).or_call(self.assertTrue, False)
Testing bad clause bool(Check(5).satisfies(str.isupper))
Testing bad clause Ensure(5).satisfies(".isupper")
Testing bad clause Check(5).satisfies(".isupper").otherwise(Exception)
Testing bad clause Check(5).satisfies(".isupper").or_raise(Exception)
Testing bad clause Check(5).satisfies(".isupper").or_call(self.assertTrue, False)
Testing bad clause bool(Check(5).satisfies(".isupper"))
