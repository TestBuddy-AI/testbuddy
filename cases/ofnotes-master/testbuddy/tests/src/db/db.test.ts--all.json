{"numFailedTestSuites":1,"numFailedTests":2,"numPassedTestSuites":0,"numPassedTests":21,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":1,"numTotalTests":23,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1694407608590,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["bulkAdd"],"failureMessages":[],"fullName":"bulkAdd should add multiple notes to the notes property","location":null,"status":"passed","title":"should add multiple notes to the notes property"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should return true for a truthy value","location":null,"status":"passed","title":"should return true for a truthy value"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should return false for a falsy value","location":null,"status":"passed","title":"should return false for a falsy value"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should return true for a non-zero number","location":null,"status":"passed","title":"should return true for a non-zero number"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should return false for zero","location":null,"status":"passed","title":"should return false for zero"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should return true for a non-empty string","location":null,"status":"passed","title":"should return true for a non-empty string"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should return false for an empty string","location":null,"status":"passed","title":"should return false for an empty string"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should return true for a non-empty object","location":null,"status":"passed","title":"should return true for a non-empty object"},{"ancestorTitles":[],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n    at Object.<anonymous> (/Users/camilo.salinas/Documents/Personal/Github/testbuddy/cases/ofnotes-master/tests/src/db/db.test.ts:60:18)\n    at Object.asyncJestTest (/Users/camilo.salinas/Documents/Personal/Github/testbuddy/cases/ofnotes-master/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at /Users/camilo.salinas/Documents/Personal/Github/testbuddy/cases/ofnotes-master/node_modules/jest-jasmine2/build/queueRunner.js:43:12\n    at new Promise (<anonymous>)\n    at mapper (/Users/camilo.salinas/Documents/Personal/Github/testbuddy/cases/ofnotes-master/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at /Users/camilo.salinas/Documents/Personal/Github/testbuddy/cases/ofnotes-master/node_modules/jest-jasmine2/build/queueRunner.js:73:41"],"fullName":"should return false for an empty object","location":null,"status":"failed","title":"should return false for an empty object"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should return true for a non-empty array","location":null,"status":"passed","title":"should return true for a non-empty array"},{"ancestorTitles":[],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n    at Object.<anonymous> (/Users/camilo.salinas/Documents/Personal/Github/testbuddy/cases/ofnotes-master/tests/src/db/db.test.ts:71:18)\n    at Object.asyncJestTest (/Users/camilo.salinas/Documents/Personal/Github/testbuddy/cases/ofnotes-master/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at /Users/camilo.salinas/Documents/Personal/Github/testbuddy/cases/ofnotes-master/node_modules/jest-jasmine2/build/queueRunner.js:43:12\n    at new Promise (<anonymous>)\n    at mapper (/Users/camilo.salinas/Documents/Personal/Github/testbuddy/cases/ofnotes-master/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at /Users/camilo.salinas/Documents/Personal/Github/testbuddy/cases/ofnotes-master/node_modules/jest-jasmine2/build/queueRunner.js:73:41"],"fullName":"should return false for an empty array","location":null,"status":"failed","title":"should return false for an empty array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should return false for null","location":null,"status":"passed","title":"should return false for null"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should return false for undefined","location":null,"status":"passed","title":"should return false for undefined"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should return true when input is a truthy value","location":null,"status":"passed","title":"should return true when input is a truthy value"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should return false when input is a falsy value","location":null,"status":"passed","title":"should return false when input is a falsy value"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should return true when input is an object","location":null,"status":"passed","title":"should return true when input is an object"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should return true when input is an array","location":null,"status":"passed","title":"should return true when input is an array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should return true when input is a function","location":null,"status":"passed","title":"should return true when input is a function"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should return true when input is a number","location":null,"status":"passed","title":"should return true when input is a number"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should return true when input is a string","location":null,"status":"passed","title":"should return true when input is a string"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should return true when input is a boolean","location":null,"status":"passed","title":"should return true when input is a boolean"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should return false when input is null","location":null,"status":"passed","title":"should return false when input is null"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should return false when input is undefined","location":null,"status":"passed","title":"should return false when input is undefined"}],"endTime":1694407609181,"message":"  ● should return false for an empty object\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      58 | it('should return false for an empty object', () => {\n      59 |   const result = Boolean({});\n    > 60 |   expect(result).toBe(false);\n         |                  ^\n      61 | });\n      62 | \n      63 | // Use case: array\n\n      at Object.<anonymous> (tests/src/db/db.test.ts:60:18)\n\n  ● should return false for an empty array\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      69 | it('should return false for an empty array', () => {\n      70 |   const result = Boolean([]);\n    > 71 |   expect(result).toBe(false);\n         |                  ^\n      72 | });\n      73 | \n      74 | // Use case: null and undefined\n\n      at Object.<anonymous> (tests/src/db/db.test.ts:71:18)\n","name":"/Users/camilo.salinas/Documents/Personal/Github/testbuddy/cases/ofnotes-master/tests/src/db/db.test.ts","startTime":1694407608893,"status":"failed","summary":""}],"wasInterrupted":false}