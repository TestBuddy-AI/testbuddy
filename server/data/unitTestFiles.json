[
  {
    "fileName": "JSOperations.js",
    "sessionId": "test",
    "functions": [
      {
        "fileName": "JSOperations.js",
        "code": "function sum(a, b) { return a + b; }",
        "hash": "3f1896448aa02ab4a79194edb4d555fd",
        "unitTests": "\nit('should return the sum of two positive numbers', () => {\n  expect(sum(2, 3)).toBe(5);\n});\n\nit('should return the sum of a positive number and zero', () => {\n  expect(sum(4, 0)).toBe(4);\n});\n\nit('should return the sum of a positive number and a negative number', () => {\n  expect(sum(5, -2)).toBe(3);\n});\n\nit('should return the sum of two negative numbers', () => {\n  expect(sum(-3, -4)).toBe(-7);\n});\n\nit('should return the sum of a negative number and zero', () => {\n  expect(sum(-6, 0)).toBe(-6);\n});\n\nit('should return the sum of zero and zero', () => {\n  expect(sum(0, 0)).toBe(0);\n});\n"
      },
      {
        "fileName": "JSOperations.js",
        "code": "function difference(a, b) { return a - b; }",
        "hash": "af651b94312337581ac362b42fc170c6",
        "unitTests": "\nit('should return the difference between two positive numbers', () => {\n  expect(difference(5, 2)).toBe(3);\n});\n\nit('should return the difference between a positive and a negative number', () => {\n  expect(difference(5, -2)).toBe(7);\n});\n\nit('should return the difference between two negative numbers', () => {\n  expect(difference(-5, -2)).toBe(-3);\n});\n\nit('should return the difference between a negative and a positive number', () => {\n  expect(difference(-5, 2)).toBe(-7);\n});\n\nit('should return 0 when both numbers are the same', () => {\n  expect(difference(5, 5)).toBe(0);\n});\n"
      },
      {
        "fileName": "JSOperations.js",
        "code": "function multiply(a, b) { return a * b; }",
        "hash": "a74e7f1985e834a793aabbd9753c1baf",
        "unitTests": "\nit('should multiply two positive numbers', () => {\n  expect(multiply(2, 3)).toBe(6);\n});\n\nit('should multiply a positive number and zero', () => {\n  expect(multiply(4, 0)).toBe(0);\n});\n\nit('should multiply a positive number and a negative number', () => {\n  expect(multiply(5, -2)).toBe(-10);\n});\n\nit('should multiply two negative numbers', () => {\n  expect(multiply(-3, -4)).toBe(12);\n});\n\nit('should multiply a positive number and Infinity', () => {\n  expect(multiply(6, Infinity)).toBe(Infinity);\n});\n\nit('should multiply a negative number and Infinity', () => {\n  expect(multiply(-7, Infinity)).toBe(-Infinity);\n});\n\nit('should multiply a positive number and NaN', () => {\n  expect(multiply(8, NaN)).toBe(NaN);\n});\n\nit('should multiply a negative number and NaN', () => {\n  expect(multiply(-9, NaN)).toBe(NaN);\n});\n"
      },
      {
        "fileName": "JSOperations.js",
        "code": "function division(a, b) { return a / b; }",
        "hash": "0c7c66e18b49e291493b09c059fa5ac8",
        "unitTests": "\nit('should return the correct result when dividing two positive numbers', () => {\n  expect(division(10, 2)).toBe(5);\n});\n\nit('should return the correct result when dividing a positive number by zero', () => {\n  expect(division(10, 0)).toBe(Infinity);\n});\n\nit('should return the correct result when dividing zero by a positive number', () => {\n  expect(division(0, 10)).toBe(0);\n});\n\nit('should return the correct result when dividing a positive number by a negative number', () => {\n  expect(division(10, -2)).toBe(-5);\n});\n\nit('should return the correct result when dividing a negative number by a positive number', () => {\n  expect(division(-10, 2)).toBe(-5);\n});\n\nit('should return the correct result when dividing two negative numbers', () => {\n  expect(division(-10, -2)).toBe(5);\n});\n"
      },
      {
        "fileName": "JSOperations.js",
        "code": "function nextDayOfTheWeek(currentDay) { if (currentDay >= 0 && currentDay <= 6) { if (currentDay < 6) { return sum(currentDay, 1); } else { return 0; } } else { throw Error(`Current day ${currentDay} is not valid!`); } }",
        "hash": "ed978a0f19e466d28e286c5a42dc091c",
        "unitTests": "\nit('should return the next day of the week when current day is between 0 and 5', () => {\n  expect(nextDayOfTheWeek(0)).toBe(1);\n  expect(nextDayOfTheWeek(1)).toBe(2);\n  expect(nextDayOfTheWeek(2)).toBe(3);\n  expect(nextDayOfTheWeek(3)).toBe(4);\n  expect(nextDayOfTheWeek(4)).toBe(5);\n  expect(nextDayOfTheWeek(5)).toBe(6);\n});\n\nit('should return 0 when current day is 6', () => {\n  expect(nextDayOfTheWeek(6)).toBe(0);\n});\n\nit('should throw an error when current day is less than 0', () => {\n  expect(() => nextDayOfTheWeek(-1)).toThrowError('Current day -1 is not valid!');\n});\n\nit('should throw an error when current day is greater than 6', () => {\n  expect(() => nextDayOfTheWeek(7)).toThrowError('Current day 7 is not valid!');\n});\n"
      },
      {
        "fileName": "JSOperations.js",
        "code": "function previousDayOfTheWeek(currentDay) { if (currentDay >= 0 && currentDay <= 6) { if (currentDay > 0) { return difference(currentDay, 1); } else { return 6; } } else { throw Error(`Current day ${currentDay} is not valid!`); } }",
        "hash": "58f15e9501bbca4f1154c4455617ffa5",
        "unitTests": "\nfunction previousDayOfTheWeek(currentDay) {\n  if (currentDay >= 0 && currentDay <= 6) {\n    if (currentDay > 0) {\n      return difference(currentDay, 1);\n    } else {\n      return 6;\n    }\n  } else {\n    throw Error(`Current day ${currentDay} is not valid!`);\n  }\n}\n\ndescribe('previousDayOfTheWeek', () => {\n  it('should return 6 when currentDay is 0', () => {\n    expect(previousDayOfTheWeek(0)).toBe(6);\n  });\n\n  it('should return 0 when currentDay is 1', () => {\n    expect(previousDayOfTheWeek(1)).toBe(0);\n  });\n\n  it('should return 1 when currentDay is 2', () => {\n    expect(previousDayOfTheWeek(2)).toBe(1);\n  });\n\n  it('should return 2 when currentDay is 3', () => {\n    expect(previousDayOfTheWeek(3)).toBe(2);\n  });\n\n  it('should return 3 when currentDay is 4', () => {\n    expect(previousDayOfTheWeek(4)).toBe(3);\n  });\n\n  it('should return 4 when currentDay is 5', () => {\n    expect(previousDayOfTheWeek(5)).toBe(4);\n  });\n\n  it('should return 5 when currentDay is 6', () => {\n    expect(previousDayOfTheWeek(6)).toBe(5);\n  });\n\n  it('should throw an error when currentDay is less than 0', () => {\n    expect(() => previousDayOfTheWeek(-1)).toThrowError('Current day -1 is not valid!');\n  });\n\n  it('should throw an error when currentDay is greater than 6', () => {\n    expect(() => previousDayOfTheWeek(7)).toThrowError('Current day 7 is not valid!');\n  });\n});\n"
      },
      {
        "fileName": "JSOperations.js",
        "code": "function minutesToHours(minutes) { return multiply(minutes, 60); }",
        "hash": "94ebf66d47984a0bf69ed01e8a945134",
        "unitTests": "\ndescribe('minutesToHours', () => {\n  it('should return the correct number of hours when given a positive number of minutes', () => {\n    expect(minutesToHours(60)).toBe(1);\n    expect(minutesToHours(120)).toBe(2);\n    expect(minutesToHours(180)).toBe(3);\n  });\n\n  it('should return 0 when given 0 minutes', () => {\n    expect(minutesToHours(0)).toBe(0);\n  });\n\n  it('should return a negative number of hours when given a negative number of minutes', () => {\n    expect(minutesToHours(-60)).toBe(-1);\n    expect(minutesToHours(-120)).toBe(-2);\n    expect(minutesToHours(-180)).toBe(-3);\n  });\n});\n"
      },
      {
        "fileName": "JSOperations.js",
        "code": "function millisecondsToMinutes(milliseconds) { return division(milliseconds, 60000); }",
        "hash": "622a6329a81b5d93d57fd52348d751de",
        "unitTests": "\ndescribe('millisecondsToMinutes', () => {\n  it('should return 0 when milliseconds is 0', () => {\n    expect(millisecondsToMinutes(0)).toBe(0);\n  });\n\n  it('should return 1 when milliseconds is 60000', () => {\n    expect(millisecondsToMinutes(60000)).toBe(1);\n  });\n\n  it('should return 2 when milliseconds is 120000', () => {\n    expect(millisecondsToMinutes(120000)).toBe(2);\n  });\n\n  it('should return -1 when milliseconds is -60000', () => {\n    expect(millisecondsToMinutes(-60000)).toBe(-1);\n  });\n});\n"
      }
    ]
  }
]